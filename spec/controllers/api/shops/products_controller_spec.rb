require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::Shops::ProductsController, type: :controller do

  describe "Routing", type: :routing do
    it { should route(:put, '/api/shops/26/products/47671').to(action: :update, shop_id: 26, id: 47671) }
  end

  describe "PUT #update" do
    before(:each) do
      @product = create(:product_with_category)
      @update_params = {
        name: "Lot de 4 tasses à café style rétro AOC",
        categoryId: @product.category_id,
        brand: "AOC",
        status: "online",
        isService: false,
        sellerAdvice: "Les tasses donneront du style à votre pause café !",
        description: "Lot de 4 tasses à café rétro chic en porcelaine. 4 tasses et 4 sous-tasses de 4 couleurs différentes.",
        variants: [
          {
            basePrice: 19.9,
            weight: 0.24,
            quantity: 4,
            isDefault: true,
            goodDeal: {
              startAt: "17/05/2021",
              endAt: "18/06/2021",
              discount: 20
            },
            characteristics: [
              {
                name: "Taille unique",
                type: "size"
              },
              {
                name: "Rouge",
                type: "color"
              }
            ]
          }
        ]
      }
    end

    context "with valid params" do
      it "Updates a product" do
        post :update, params: @update_params.merge(locale: I18n.locale, shop_id: @product.shop_id, id: @product.id)
        should respond_with(200)
        expect(JSON.parse(response.body)).to eq(
          {
            "product"=> {
              "id"=>@product.id,
              "name"=>"Lot de 4 tasses à café style rétro AOC",
              "slug"=>"mystring",
              "category"=>{"id"=>@product.category_id, "name"=>"Category"},
              "brand"=>"AOC",
              "status"=>"online",
              "isService"=>false,
              "sellerAdvice"=>"Les tasses donneront du style à votre pause café !",
              "description"=>"Lot de 4 tasses à café rétro chic en porcelaine. 4 tasses et 4 sous-tasses de 4 couleurs différentes.",
              "variants"=>
               [{"id"=>@product.references.first.id,
                 "basePrice"=>19.9,
                 "weight"=>0.24,
                 "quantity"=>4,
                 "isDefault"=>true,
                 "goodDeal"=>{"startAt"=>"17/05/2021", "endAt"=>"18/06/2021", "discount"=>20.0},
                 "characteristics"=>[{"name"=>"Rouge", "type"=>"color"}, {"name"=>"Taille unique", "type"=>"size"}]}]}

            })
      end
    end

    context "with invalid url" do
      it "Returns 400 Bad Request if shop_id not a Numeric" do
        post :update, params: @update_params.merge(locale: I18n.locale, shop_id: 'ChuckNorris', id: @product.id)
        should respond_with(400)
        expect(JSON.parse(response.body)).to eq({"detail"=>"The syntax of the query is incorrect", "message"=>"Bad Request", "status"=>400})
      end


      it "Returns 400 Bad Request if id not a Numeric" do
        post :update, params: @update_params.merge(locale: I18n.locale, shop_id: @product.shop_id, id: 'Terminator')
        should respond_with(400)
        expect(JSON.parse(response.body)).to eq({"detail"=>"The syntax of the query is incorrect", "message"=>"Bad Request", "status"=>400})
      end
    end

    context "with invalid params" do
      it "Returns 400 Bad Request if no params" do
        post :update, params: { locale: I18n.locale, shop_id: @product.shop_id, id: @product.id }
        should respond_with(400)
        expect(JSON.parse(response.body)).to eq({"detail"=>"The syntax of the query is incorrect: Can't update without relevant params", "message"=>"Bad Request", "status"=>400})
      end

      it "Returns 404 Not Found if category doesn't exists" do
        @update_params[:categoryId] = 1
        post :update, params: @update_params.merge(locale: I18n.locale, shop_id: @product.shop_id, id: @product.id)
        should respond_with(404)
        expect(JSON.parse(response.body)).to eq({"detail"=>"Category not found", "message"=>"Not Found", "status"=>404})
      end

      it "Returns 404 Not Found if product doesn't exists" do
        post :update, params: @update_params.merge(locale: I18n.locale, shop_id: @product.shop_id, id: (@product.id + 1))
        should respond_with(404)
        expect(JSON.parse(response.body)).to eq({"detail"=>"Product not found", "message"=>"Not Found", "status"=>404})
      end
    end
  end
end



