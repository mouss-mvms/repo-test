require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is gene^rated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::Shops::ProductsController, type: :controller do

  # GET #index
  describe "GET #index" do
    before(:each) do
      @products = [create(:product), create(:product), create(:product)]
      @shop = create(:shop)
      @products.each { |prod| prod.update(shop_id: @shop.id) }
    end

    context "with valid params" do
      it "get all products from shop" do
        get :index, params: { shop_id: @shop.id }
        should respond_with(200)

        response_body = JSON.parse(response.body)
        expect(response_body).to be_an_instance_of(Array)
        expect(response_body.count).to eq(3)

        product_ids = response_body.map { |p| p.symbolize_keys[:id] }
        expect(Product.where(id: product_ids).actives.to_a).to eq(@products)
      end
    end

    context "with invalid params" do
      context "shop_id not a Numeric" do
        it "should returns 400 HTTP Status" do
          get :index, params: { shop_id: 'Xenomorph' }
          should respond_with(400)
          expect(JSON.parse(response.body)).to eq({"detail"=>"Shop_id is incorrect", "message"=>"Bad Request", "status"=>400})
        end
      end

      context "shop doesn't exists" do
        it "should returns 404 HTTP Status" do
          get :index, params: { shop_id: (@shop.id + 1) }
          should respond_with(404)
          expect(JSON.parse(response.body)).to eq({"detail"=>"Couldn't find Shop with 'id'=#{@shop.id + 1}", "message"=>"Not Found", "status"=>404})
        end
      end
    end
  end

end

def generate_token(user)
  exp_payload = { id: user.id, exp: Time.now.to_i + 1 * 3600 * 24 }
  JWT.encode exp_payload, ENV["JWT_SECRET"], 'HS256'
end



