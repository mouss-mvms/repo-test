{
  "openapi": "3.0.1",
  "info": {
    "title": "CATALOG API",
    "version": "0.1.0",
    "description": "Ma Ville Mon Shopping Catalog API"
  },
  "paths": {
    "/categories": {
      "get": {
        "summary": "",
        "tags": [
          "Categories"
        ],
        "description": "Retrieve all categories.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "categories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/shops/{shopId}/orders": {
      "get": {
        "summary": "",
        "tags": [
          "Orders"
        ],
        "description": "Retrieve all orders from the given shop.",
        "parameters": [
          {
            "name": "shopId",
            "in": "path",
            "description": "Unique identifier of the desired shop.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orders": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "",
        "tags": [
          "Orders"
        ],
        "description": "Create an order in the given shop.",
        "parameters": [
          {
            "name": "shopId",
            "in": "path",
            "description": "Unique identifier of the desired shop.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "order": {
                      "$ref": "#/components/schemas/Order"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewOrder"
              }
            }
          }
        }
      }
    },
    "/shops/{shopId}/orders/{orderId}": {
      "parameters": [
        {
          "name": "shopId",
          "in": "path",
          "description": "Unique identifier of the desired shop.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "orderId",
          "in": "path",
          "description": "Unique identifier of the desired order.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "delete": {
        "summary": "",
        "tags": [
          "Orders"
        ],
        "description": "Delete an order from the given shop.",
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/shops/{shopId}/products": {
      "parameters": [
        {
          "name": "shopId",
          "in": "path",
          "description": "Unique identifier of the desired shop.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "summary": "",
        "tags": [
          "Products"
        ],
        "description": "Retrieve all products from the given shop.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "products": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "",
        "tags": [
          "Products"
        ],
        "description": "Create a product in the given shop.",
        "parameters": [

        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "product": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProduct"
              }
            }
          }
        }
      }
    },
    "/shops/{shopId}/products/{productId}": {
      "parameters": [
        {
          "name": "shopId",
          "in": "path",
          "description": "Unique identifier of the desired shop.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "productId",
          "in": "path",
          "description": "Unique identifier of the desired product.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "summary": "",
        "tags": [
          "Products"
        ],
        "description": "Retrieve a single product from the given shop.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "product": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://dev.mavillemonshopping.fr/fr"
    }
  ],
  "components": {
    "schemas": {
      "Shop": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Unique identifier of a shop."
          },
          "name": {
            "type": "string",
            "example": "Jardin Local",
            "description": "Display name of a shop."
          },
          "slug": {
            "type": "string",
            "example": "jardin-local",
            "description": "Slug of a shop."
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            },
            "description": "List of products."
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Unique identifier of a product."
          },
          "name": {
            "type": "string",
            "example": "Chaise longue",
            "description": "Display name of a product."
          },
          "slug": {
            "type": "string",
            "example": "chaise-longue",
            "description": "Slug of a product."
          },
          "description": {
            "type": "string",
            "example": "Chaise longue pour jardin extérieur.",
            "description": "Description of a product."
          },
          "category": {
            "$ref": "#/components/schemas/Category",
            "description": "Category of a product."
          },
          "brand": {
            "type": "string",
            "example": "Lafuma",
            "description": "Brand of a product."
          },
          "status": {
            "type": "string",
            "example": "online",
            "default": "not_online",
            "enum": [
              "not_online",
              "online",
              "draft_cityzen",
              "submitted",
              "refused"
            ],
            "description": "Status of a product."
          },
          "sellerAdvice": {
            "type": "string",
            "example": "Nettoyez votre mobilier à l’eau claire ou savonneuse sans détergent.",
            "description": "Seller advice of a product"
          },
          "isService": {
            "type": "boolean",
            "example": false,
            "description": "This product is a merchandise or a service."
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Variant"
            },
            "description": "List of variants."
          }
        }
      },
      "NewProduct": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Chaise longue",
            "description": "Display name of a product."
          },
          "description": {
            "type": "string",
            "example": "Chaise longue pour jardin extérieur.",
            "description": "Description of a product."
          },
          "categoryId": {
            "type": "integer",
            "example": 1,
            "description": "Unique identifier of a category."
          },
          "brand": {
            "type": "string",
            "example": "Lafuma",
            "description": "Brand of a product."
          },
          "status": {
            "type": "string",
            "example": "online",
            "default": "not_online",
            "enum": [
              "not_online",
              "online",
              "draft_cityzen",
              "submitted",
              "refused"
            ],
            "description": "Status of a product."
          },
          "sellerAdvice": {
            "type": "string",
            "example": "Nettoyez votre mobilier à l’eau claire ou savonneuse sans détergent.",
            "description": "Seller advice of a product"
          },
          "isService": {
            "type": "boolean",
            "example": false,
            "description": "This product is a merchandise or a service."
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewVariant"
            },
            "description": "List of variants."
          }
        },
        "required": [
          "name"
        ]
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Unique identifier of a category."
          },
          "name": {
            "type": "string",
            "example": "Mobilier extérieur",
            "description": "Display name of a category."
          }
        }
      },
      "Variant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Unique identifier of a variant."
          },
          "basePrice": {
            "type": "number",
            "format": "double",
            "example": 20.5,
            "description": "Base price of a variant."
          },
          "weight": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "example": 20.5,
            "description": "Weight in grams of a variant."
          },
          "quantity": {
            "type": "integer",
            "example": 20,
            "description": "Quantity in stock of a variant."
          },
          "isDefault": {
            "type": "boolean",
            "default": false,
            "description": "Default state of a variant."
          },
          "goodDeal": {
            "$ref": "#/components/schemas/GoodDeal",
            "description": "Good deal of a variant."
          },
          "characteristics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Characteristic"
            },
            "description": "List of characteristics."
          }
        }
      },
      "NewVariant": {
        "type": "object",
        "properties": {
          "basePrice": {
            "type": "number",
            "format": "double",
            "example": 20.5,
            "description": "Base price of a variant."
          },
          "weight": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "example": 20.5,
            "description": "Weight in grams of a variant."
          },
          "quantity": {
            "type": "integer",
            "example": 20,
            "description": "Quantity in stock of a variant."
          },
          "isDefault": {
            "type": "boolean",
            "default": false,
            "description": "Default state of a variant."
          },
          "goodDeal": {
            "$ref": "#/components/schemas/GoodDeal",
            "description": "Good deal of a variant."
          },
          "characteristics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Characteristic"
            },
            "description": "List of characteristics."
          }
        },
        "required": [
          "basePrice",
          "quantity"
        ]
      },
      "Characteristic": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "blue",
            "description": "Display name of a characteristic."
          },
          "type": {
            "type": "string",
            "example": "color",
            "enum": [
              "color",
              "size"
            ],
            "description": "Type of a characteristic."
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "GoodDeal": {
        "type": "object",
        "properties": {
          "startsAt": {
            "type": "string",
            "format": "date",
            "example": "20/01/2021",
            "description": "Start date of a good deal."
          },
          "endsAt": {
            "type": "string",
            "format": "date",
            "example": "16/02/2021",
            "description": "End date of a good deal."
          },
          "discount": {
            "type": "integer",
            "example": "20",
            "minimum": 1,
            "maximum": 100,
            "description": "Discount amount of a good deal."
          }
        },
        "required": [
          "startsAt",
          "endsAt",
          "discount"
        ]
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Unique identifier of an order."
          },
          "variant": {
            "$ref": "#/components/schemas/Variant",
            "description": "Variant of an order."
          },
          "quantity": {
            "type": "integer",
            "example": 2,
            "minimum": 1,
            "description": "Variant quantity of an order."
          }
        }
      },
      "NewOrder": {
        "type": "object",
        "properties": {
          "variantId": {
            "type": "integer",
            "example": 1,
            "description": "Unique identifier of a variant."
          },
          "quantity": {
            "type": "integer",
            "example": 2,
            "minimum": 1,
            "description": "Variant quantity of an order."
          }
        },
        "required": [
          "variantId",
          "quantity"
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 400,
            "description": "Status of an error."
          },
          "message": {
            "type": "string",
            "example": "Bad Request",
            "description": "Message of an error."
          },
          "detail": {
            "type": "string",
            "example": "The syntax of the query is incorrect.",
            "description": "Detail message of an error."
          }
        }
      }
    }
  }
}